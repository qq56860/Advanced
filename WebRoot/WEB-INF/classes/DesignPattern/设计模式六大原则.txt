1、单一职责原则：
	大白话：一个类只负责一项职责。
	
	遵循单一职责原则。分别建立两个类T1、T2，使T1完成职责P1功能，T2完成职责P2功能。这样，当修改类T1时，不会使职责P2发生故障风险；同理，当修改T2时，也不会使职责P1发生故障风险。
	
	违背现象：类T只负责一个职责P，这样设计是符合单一职责原则的。后来由于某种原因，也许是需求变更了，也许是程序的设计者境界提高了，需要将职责P细分为粒度更细的职责P1，P2，这就是所谓的职责扩散。
	
	
2、里氏替换原则：   -----继承时要注重
	大白话：类B继承类A时，除添加新的方法完成新增功能外，尽量不要重写父类A的方法，也尽量不要重载父类A的方法。
	
	父类中凡是已经实现好的方法，实际上是在设定一系列的规范和契约，虽然它不强制要求所有的子类必须遵从这些契约，但是如果子类对这些非抽象方法任意修改，就会对整个继承体系造成破坏。
	
	父类需要修改时，必须考虑到所有的子类，并且父类修改后，所有涉及到子类的功能都有可能会产生故障。
	

3、依赖倒置原则：   -----多态、接口
	大白话：高层模块不应该依赖低层模块，二者都应该依赖其抽象

	类A一般是高层模块，负责复杂的业务逻辑；类B和类C是低层模块，负责基本的原子操作；假如修改类A，会给程序带来不必要的风险。
	
	例子：母亲给孩子讲故事，只要给她一本书，她就可以照着书给孩子讲故事了。（在母亲类中用book.getRead()）
		如果要把书换成报纸，就要改变母亲类。
		可以使 书、报纸都实现接口IReader。（在母亲类中用reader.getRead()）

		
4、接口隔离原则：
	大白话：将臃肿的接口拆分为独立的几个接口
	
	类A通过接口I依赖类B，类C通过接口I依赖类D，如果接口I对于类A和类B来说不是最小接口，则类B和类D必须去实现他们不需要的方法。
	

6、开闭原则：
	大白话：当需要变化时，尽量通过扩展的方式实现变化，而不是通过修改已有的代码实现变化
	
	
	
5、迪米特法则：
	大白话：一个对象应该对其他对象保持最少的了解，一个类对自己依赖的类知道的越少越好
	
	迪米特法则还有一个更简单的定义：只与直接的朋友通信。首先来解释一下什么是直接的朋友：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。
	